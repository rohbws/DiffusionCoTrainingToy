Launching training on one GPU.
Epoch 0:   0%|          | 0/395 [00:00<?, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
Epoch 0: 100%|██████████| 395/395 [00:03<00:00, 125.75it/s, loss=0.94, lr=7.9e-5, step=394]  
Epoch 1: 100%|██████████| 395/395 [00:03<00:00, 114.90it/s, loss=1.05, lr=0.0001, step=789]
Epoch 2: 100%|██████████| 395/395 [00:02<00:00, 143.74it/s, loss=1.05, lr=0.0001, step=1184] 
Epoch 3: 100%|██████████| 395/395 [00:03<00:00, 117.83it/s, loss=0.803, lr=0.0001, step=1579]
Epoch 4: 100%|██████████| 395/395 [00:02<00:00, 140.06it/s, loss=0.571, lr=0.0001, step=1974]
Epoch 5: 100%|██████████| 395/395 [00:03<00:00, 122.40it/s, loss=0.648, lr=0.0001, step=2369]
Epoch 6: 100%|██████████| 395/395 [00:02<00:00, 134.24it/s, loss=0.435, lr=0.0001, step=2764]
Epoch 7: 100%|██████████| 395/395 [00:03<00:00, 121.90it/s, loss=0.419, lr=0.0001, step=3159]
Epoch 8: 100%|██████████| 395/395 [00:02<00:00, 137.81it/s, loss=0.274, lr=9.99e-5, step=3554]
Epoch 9: 100%|██████████| 395/395 [00:03<00:00, 121.03it/s, loss=0.249, lr=9.99e-5, step=3949]
Epoch 10: 100%|██████████| 395/395 [00:02<00:00, 141.41it/s, loss=0.231, lr=9.99e-5, step=4344]
Epoch 11: 100%|██████████| 395/395 [00:03<00:00, 116.96it/s, loss=0.281, lr=9.99e-5, step=4739]
Epoch 12: 100%|██████████| 395/395 [00:02<00:00, 141.00it/s, loss=0.283, lr=9.99e-5, step=5134]
Epoch 13: 100%|██████████| 395/395 [00:03<00:00, 117.25it/s, loss=0.313, lr=9.98e-5, step=5529]
Epoch 14: 100%|██████████| 395/395 [00:02<00:00, 136.44it/s, loss=0.252, lr=9.98e-5, step=5924]
Epoch 15: 100%|██████████| 395/395 [00:03<00:00, 120.14it/s, loss=0.269, lr=9.98e-5, step=6319]
Epoch 16: 100%|██████████| 395/395 [00:02<00:00, 133.41it/s, loss=0.305, lr=9.98e-5, step=6714]
Epoch 17: 100%|██████████| 395/395 [00:03<00:00, 116.49it/s, loss=0.311, lr=9.97e-5, step=7109]
Epoch 18: 100%|██████████| 395/395 [00:02<00:00, 135.43it/s, loss=0.264, lr=9.97e-5, step=7504]
Epoch 19: 100%|██████████| 395/395 [00:03<00:00, 123.28it/s, loss=0.213, lr=9.97e-5, step=7899]
Epoch 20: 100%|██████████| 395/395 [00:02<00:00, 137.71it/s, loss=0.238, lr=9.96e-5, step=8294]
Epoch 21: 100%|██████████| 395/395 [00:03<00:00, 120.79it/s, loss=0.171, lr=9.96e-5, step=8689]
Epoch 22: 100%|██████████| 395/395 [00:02<00:00, 135.51it/s, loss=0.255, lr=9.95e-5, step=9084]
Epoch 23: 100%|██████████| 395/395 [00:03<00:00, 117.41it/s, loss=0.211, lr=9.95e-5, step=9479]
Epoch 24: 100%|██████████| 395/395 [00:02<00:00, 140.18it/s, loss=0.159, lr=9.94e-5, step=9874]
Epoch 25: 100%|██████████| 395/395 [00:03<00:00, 116.22it/s, loss=0.196, lr=9.94e-5, step=10269]
Epoch 26: 100%|██████████| 395/395 [00:02<00:00, 139.20it/s, loss=0.228, lr=9.93e-5, step=10664]
Epoch 27: 100%|██████████| 395/395 [00:03<00:00, 118.85it/s, loss=0.161, lr=9.93e-5, step=11059]
Epoch 28: 100%|██████████| 395/395 [00:02<00:00, 136.13it/s, loss=0.157, lr=9.92e-5, step=11454]
Epoch 29: 100%|██████████| 395/395 [00:03<00:00, 120.30it/s, loss=0.269, lr=9.92e-5, step=11849]
Epoch 30: 100%|██████████| 395/395 [00:02<00:00, 136.52it/s, loss=0.171, lr=9.91e-5, step=12244] 
Epoch 31: 100%|██████████| 395/395 [00:03<00:00, 118.27it/s, loss=0.214, lr=9.91e-5, step=12639]
Epoch 32: 100%|██████████| 395/395 [00:02<00:00, 140.56it/s, loss=0.137, lr=9.9e-5, step=13034] 
Epoch 33: 100%|██████████| 395/395 [00:03<00:00, 115.22it/s, loss=0.12, lr=9.89e-5, step=13429]
Epoch 34: 100%|██████████| 395/395 [00:02<00:00, 138.51it/s, loss=0.145, lr=9.89e-5, step=13824]
Epoch 35: 100%|██████████| 395/395 [00:03<00:00, 116.59it/s, loss=0.198, lr=9.88e-5, step=14219]
Epoch 36: 100%|██████████| 395/395 [00:02<00:00, 140.32it/s, loss=0.14, lr=9.87e-5, step=14614] 
Epoch 37: 100%|██████████| 395/395 [00:03<00:00, 114.63it/s, loss=0.0924, lr=9.87e-5, step=15009]
Epoch 38: 100%|██████████| 395/395 [00:02<00:00, 140.60it/s, loss=0.17, lr=9.86e-5, step=15404]  
Epoch 39: 100%|██████████| 395/395 [00:03<00:00, 119.67it/s, loss=0.116, lr=9.85e-5, step=15799]
Epoch 40: 100%|██████████| 395/395 [00:02<00:00, 136.12it/s, loss=0.184, lr=9.84e-5, step=16194]
Epoch 41: 100%|██████████| 395/395 [00:03<00:00, 119.19it/s, loss=0.172, lr=9.84e-5, step=16589]
Epoch 42: 100%|██████████| 395/395 [00:02<00:00, 132.87it/s, loss=0.14, lr=9.83e-5, step=16984]  
Epoch 43: 100%|██████████| 395/395 [00:03<00:00, 116.72it/s, loss=0.112, lr=9.82e-5, step=17379]
Epoch 44: 100%|██████████| 395/395 [00:02<00:00, 138.19it/s, loss=0.214, lr=9.81e-5, step=17774] 
Epoch 45: 100%|██████████| 395/395 [00:03<00:00, 115.82it/s, loss=0.146, lr=9.8e-5, step=18169]
Epoch 46: 100%|██████████| 395/395 [00:02<00:00, 140.29it/s, loss=0.0902, lr=9.79e-5, step=18564]
Epoch 47: 100%|██████████| 395/395 [00:03<00:00, 116.14it/s, loss=0.145, lr=9.78e-5, step=18959]
Epoch 48: 100%|██████████| 395/395 [00:02<00:00, 136.55it/s, loss=0.191, lr=9.78e-5, step=19354] 
Epoch 49: 100%|██████████| 395/395 [00:03<00:00, 119.01it/s, loss=0.205, lr=9.77e-5, step=19749]
Epoch 50: 100%|██████████| 395/395 [00:02<00:00, 133.65it/s, loss=0.138, lr=9.76e-5, step=20144] 
Epoch 51: 100%|██████████| 395/395 [00:03<00:00, 116.16it/s, loss=0.148, lr=9.75e-5, step=20539]
Epoch 52: 100%|██████████| 395/395 [00:02<00:00, 133.42it/s, loss=0.16, lr=9.74e-5, step=20934]  
Epoch 53: 100%|██████████| 395/395 [00:03<00:00, 119.52it/s, loss=0.115, lr=9.73e-5, step=21329]
Epoch 54: 100%|██████████| 395/395 [00:02<00:00, 140.47it/s, loss=0.113, lr=9.72e-5, step=21724] 
Epoch 55: 100%|██████████| 395/395 [00:03<00:00, 116.12it/s, loss=0.209, lr=9.71e-5, step=22119]
Epoch 56: 100%|██████████| 395/395 [00:02<00:00, 142.79it/s, loss=0.105, lr=9.7e-5, step=22514]  
Epoch 57: 100%|██████████| 395/395 [00:03<00:00, 114.50it/s, loss=0.173, lr=9.68e-5, step=22909]
Epoch 58: 100%|██████████| 395/395 [00:02<00:00, 135.84it/s, loss=0.162, lr=9.67e-5, step=23304] 
Epoch 59: 100%|██████████| 395/395 [00:03<00:00, 117.42it/s, loss=0.14, lr=9.66e-5, step=23699]
Epoch 60: 100%|██████████| 395/395 [00:02<00:00, 142.37it/s, loss=0.113, lr=9.65e-5, step=24094] 
Epoch 61: 100%|██████████| 395/395 [00:03<00:00, 120.00it/s, loss=0.141, lr=9.64e-5, step=24489]
Epoch 62: 100%|██████████| 395/395 [00:02<00:00, 135.69it/s, loss=0.167, lr=9.63e-5, step=24884] 
Epoch 63: 100%|██████████| 395/395 [00:03<00:00, 120.72it/s, loss=0.105, lr=9.61e-5, step=25279]
Epoch 64: 100%|██████████| 395/395 [00:02<00:00, 135.73it/s, loss=0.161, lr=9.6e-5, step=25674]  
Epoch 65: 100%|██████████| 395/395 [00:03<00:00, 119.60it/s, loss=0.116, lr=9.59e-5, step=26069]
Epoch 66: 100%|██████████| 395/395 [00:02<00:00, 143.68it/s, loss=0.168, lr=9.58e-5, step=26464] 
Epoch 67: 100%|██████████| 395/395 [00:03<00:00, 113.48it/s, loss=0.131, lr=9.56e-5, step=26859]
Epoch 68: 100%|██████████| 395/395 [00:02<00:00, 142.92it/s, loss=0.145, lr=9.55e-5, step=27254] 
Epoch 69: 100%|██████████| 395/395 [00:03<00:00, 116.85it/s, loss=0.112, lr=9.54e-5, step=27649]
Epoch 70: 100%|██████████| 395/395 [00:02<00:00, 138.37it/s, loss=0.187, lr=9.53e-5, step=28044] 
Epoch 71: 100%|██████████| 395/395 [00:03<00:00, 121.23it/s, loss=0.154, lr=9.51e-5, step=28439]
Epoch 72: 100%|██████████| 395/395 [00:02<00:00, 132.59it/s, loss=0.127, lr=9.5e-5, step=28834]  
Epoch 73: 100%|██████████| 395/395 [00:03<00:00, 121.29it/s, loss=0.179, lr=9.48e-5, step=29229]
Epoch 74: 100%|██████████| 395/395 [00:02<00:00, 133.32it/s, loss=0.157, lr=9.47e-5, step=29624] 
Epoch 75: 100%|██████████| 395/395 [00:03<00:00, 121.24it/s, loss=0.159, lr=9.46e-5, step=3e+4]
Epoch 76: 100%|██████████| 395/395 [00:02<00:00, 135.22it/s, loss=0.0776, lr=9.44e-5, step=30414]
Epoch 77: 100%|██████████| 395/395 [00:03<00:00, 111.25it/s, loss=0.15, lr=9.43e-5, step=30809]
Epoch 78: 100%|██████████| 395/395 [00:02<00:00, 141.33it/s, loss=0.119, lr=9.41e-5, step=31204] 
Epoch 79: 100%|██████████| 395/395 [00:03<00:00, 113.79it/s, loss=0.214, lr=9.4e-5, step=31599]
Epoch 80: 100%|██████████| 395/395 [00:02<00:00, 139.68it/s, loss=0.0857, lr=9.38e-5, step=31994]
Epoch 81: 100%|██████████| 395/395 [00:03<00:00, 115.45it/s, loss=0.0515, lr=9.37e-5, step=32389]
Epoch 82: 100%|██████████| 395/395 [00:02<00:00, 144.51it/s, loss=0.132, lr=9.35e-5, step=32784] 
Epoch 83: 100%|██████████| 395/395 [00:03<00:00, 119.68it/s, loss=0.109, lr=9.34e-5, step=33179]
Epoch 84: 100%|██████████| 395/395 [00:03<00:00, 131.14it/s, loss=0.0768, lr=9.32e-5, step=33574]
Epoch 85: 100%|██████████| 395/395 [00:03<00:00, 118.26it/s, loss=0.127, lr=9.3e-5, step=33969]
Epoch 86: 100%|██████████| 395/395 [00:02<00:00, 132.18it/s, loss=0.186, lr=9.29e-5, step=34364] 
Epoch 87: 100%|██████████| 395/395 [00:03<00:00, 119.94it/s, loss=0.117, lr=9.27e-5, step=34759]
Epoch 88: 100%|██████████| 395/395 [00:02<00:00, 137.35it/s, loss=0.134, lr=9.26e-5, step=35154] 
Epoch 89: 100%|██████████| 395/395 [00:03<00:00, 115.22it/s, loss=0.189, lr=9.24e-5, step=35549]
Epoch 90: 100%|██████████| 395/395 [00:02<00:00, 141.82it/s, loss=0.173, lr=9.22e-5, step=35944] 
Epoch 91: 100%|██████████| 395/395 [00:03<00:00, 114.63it/s, loss=0.135, lr=9.21e-5, step=36339]
Epoch 92: 100%|██████████| 395/395 [00:02<00:00, 140.86it/s, loss=0.149, lr=9.19e-5, step=36734] 
Epoch 93: 100%|██████████| 395/395 [00:03<00:00, 119.08it/s, loss=0.0877, lr=9.17e-5, step=37129]
Epoch 94: 100%|██████████| 395/395 [00:02<00:00, 134.02it/s, loss=0.0671, lr=9.15e-5, step=37524]
Epoch 95: 100%|██████████| 395/395 [00:03<00:00, 117.70it/s, loss=0.0819, lr=9.14e-5, step=37919]
Epoch 96: 100%|██████████| 395/395 [00:03<00:00, 129.47it/s, loss=0.118, lr=9.12e-5, step=38314] 
Epoch 97: 100%|██████████| 395/395 [00:03<00:00, 119.09it/s, loss=0.105, lr=9.1e-5, step=38709]
Epoch 98: 100%|██████████| 395/395 [00:02<00:00, 139.56it/s, loss=0.0829, lr=9.08e-5, step=39104]
Epoch 99: 100%|██████████| 395/395 [00:03<00:00, 114.64it/s, loss=0.158, lr=9.06e-5, step=39499]
Epoch 100: 100%|██████████| 395/395 [00:02<00:00, 141.20it/s, loss=0.187, lr=9.05e-5, step=39894] 
Epoch 101: 100%|██████████| 395/395 [00:03<00:00, 114.11it/s, loss=0.11, lr=9.03e-5, step=40289]
Epoch 102: 100%|██████████| 395/395 [00:02<00:00, 137.61it/s, loss=0.121, lr=9.01e-5, step=40684] 
Epoch 103: 100%|██████████| 395/395 [00:03<00:00, 112.64it/s, loss=0.133, lr=8.99e-5, step=41079]
Epoch 104: 100%|██████████| 395/395 [00:02<00:00, 140.33it/s, loss=0.101, lr=8.97e-5, step=41474] 
Epoch 105: 100%|██████████| 395/395 [00:03<00:00, 118.49it/s, loss=0.099, lr=8.95e-5, step=41869]
Epoch 106: 100%|██████████| 395/395 [00:02<00:00, 133.99it/s, loss=0.136, lr=8.93e-5, step=42264] 
Early stopping at epoch 106
/tmp/ipykernel_57257/1427197143.py:50: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:278.)
  o = torch.tensor(self.o[idx], dtype=torch.float32)
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/4191793348.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/4191793348.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/4191793348.py:8: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/4191793348.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/4191793348.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/4191793348.py:8: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/2162156715.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/2162156715.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/2162156715.py:8: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
torch.Size([2, 2]) torch.Size([2, 2]) torch.Size([1])
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/1702025304.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1702025304.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
torch.Size([2, 2]) torch.Size([2, 2]) torch.Size([2, 1])
/tmp/ipykernel_57257/1770689076.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/1770689076.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1770689076.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
torch.Size([2, 2]) torch.Size([2, 2]) torch.Size([2, 1])
torch.Size([2, 5])
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
cpu
cpu
cpu
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
cpu
0it [00:00, ?it/s]
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
cpu
cpu
cpu
0it [00:00, ?it/s]
/tmp/ipykernel_57257/70703639.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("model.pt")
/tmp/ipykernel_57257/2848412625.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
cpu
cpu
cpu
0it [00:00, ?it/s]
/tmp/ipykernel_57257/1903527785.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
153it [00:00, 1519.80it/s]
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
cpu
/tmp/ipykernel_57257/4192057926.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
1000it [00:00, 2842.73it/s]
tensor([[-0.2605, -0.3516],
        [-0.6912,  0.1789]])
tensor([[-0.0793,  0.4340],
        [ 0.0513,  0.1806]])
tensor([[-0.2605, -0.3516],
        [-0.6912,  0.1789]])
tensor([[-0.4084, -0.0617],
        [-0.4084, -0.0617]])
tensor([[-0.0793,  0.4340],
        [ 0.0513,  0.1806]])
Generated 1000 samples
/tmp/ipykernel_57257/1427197143.py:35: RuntimeWarning: covariance is not symmetric positive-semidefinite.
  act = np.random.multivariate_normal(mean=obs, cov=self.cov)
Generated 100000 samples
Generated 1000 samples
Generated 10000 samples
torch.Size([256, 2]) torch.Size([256, 2])
ClassConditionedMLP(
  (mlp): Sequential(
    (0): Linear(in_features=5, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=2, bias=True)
  )
)
Input shape: torch.Size([5])
Number of weights: 8834
Noisy image shape: torch.Size([2])
Noisy image: tensor([ 0.8982, -0.5868])
Launching training on one GPU.
Epoch 0:   0%|          | 0/395 [00:00<?, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
/tmp/ipykernel_57257/1307585270.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  t = torch.tensor(t).unsqueeze(-1)  # Convert timestep to tensor (bs, 1)
Epoch 0: 100%|██████████| 395/395 [00:02<00:00, 140.44it/s, loss=0.895, lr=7.9e-5, step=394] 
Epoch 1: 100%|██████████| 395/395 [00:03<00:00, 121.04it/s, loss=1.1, lr=0.0001, step=789]
Epoch 2: 100%|██████████| 395/395 [00:03<00:00, 129.60it/s, loss=0.782, lr=0.0001, step=1184]
Epoch 3: 100%|██████████| 395/395 [00:03<00:00, 116.60it/s, loss=0.793, lr=0.0001, step=1579]
Epoch 4: 100%|██████████| 395/395 [00:02<00:00, 139.32it/s, loss=0.832, lr=0.0001, step=1974]
Epoch 5: 100%|██████████| 395/395 [00:03<00:00, 113.43it/s, loss=0.682, lr=0.0001, step=2369]
Epoch 6: 100%|██████████| 395/395 [00:02<00:00, 138.03it/s, loss=0.557, lr=0.0001, step=2764]
Epoch 7: 100%|██████████| 395/395 [00:03<00:00, 120.14it/s, loss=0.478, lr=0.0001, step=3159]
Epoch 8: 100%|██████████| 395/395 [00:02<00:00, 142.36it/s, loss=0.344, lr=9.99e-5, step=3554]
Epoch 9: 100%|██████████| 395/395 [00:03<00:00, 129.95it/s, loss=0.294, lr=9.99e-5, step=3949]
Epoch 10: 100%|██████████| 395/395 [00:02<00:00, 147.30it/s, loss=0.262, lr=9.99e-5, step=4344]
Epoch 11: 100%|██████████| 395/395 [00:03<00:00, 121.36it/s, loss=0.268, lr=9.99e-5, step=4739]
Epoch 12: 100%|██████████| 395/395 [00:02<00:00, 150.85it/s, loss=0.211, lr=9.99e-5, step=5134]
Epoch 13: 100%|██████████| 395/395 [00:03<00:00, 123.20it/s, loss=0.183, lr=9.98e-5, step=5529]
Epoch 14: 100%|██████████| 395/395 [00:02<00:00, 142.05it/s, loss=0.239, lr=9.98e-5, step=5924]
Epoch 15: 100%|██████████| 395/395 [00:03<00:00, 127.09it/s, loss=0.233, lr=9.98e-5, step=6319]
Epoch 16: 100%|██████████| 395/395 [00:02<00:00, 147.84it/s, loss=0.199, lr=9.98e-5, step=6714]
Epoch 17: 100%|██████████| 395/395 [00:03<00:00, 122.59it/s, loss=0.152, lr=9.97e-5, step=7109]
Epoch 18: 100%|██████████| 395/395 [00:02<00:00, 148.29it/s, loss=0.206, lr=9.97e-5, step=7504]
Epoch 19: 100%|██████████| 395/395 [00:03<00:00, 130.20it/s, loss=0.213, lr=9.97e-5, step=7899]
Epoch 20: 100%|██████████| 395/395 [00:02<00:00, 142.65it/s, loss=0.236, lr=9.96e-5, step=8294]
Epoch 21: 100%|██████████| 395/395 [00:03<00:00, 127.60it/s, loss=0.127, lr=9.96e-5, step=8689]
Epoch 22: 100%|██████████| 395/395 [00:02<00:00, 139.31it/s, loss=0.245, lr=9.95e-5, step=9084]
Epoch 23: 100%|██████████| 395/395 [00:03<00:00, 121.38it/s, loss=0.259, lr=9.95e-5, step=9479]
Epoch 24: 100%|██████████| 395/395 [00:02<00:00, 140.42it/s, loss=0.195, lr=9.94e-5, step=9874] 
Epoch 25: 100%|██████████| 395/395 [00:03<00:00, 118.22it/s, loss=0.197, lr=9.94e-5, step=10269]
Epoch 26: 100%|██████████| 395/395 [00:03<00:00, 131.48it/s, loss=0.148, lr=9.93e-5, step=10664] 
Epoch 27: 100%|██████████| 395/395 [00:03<00:00, 119.36it/s, loss=0.122, lr=9.93e-5, step=11059]
Epoch 28: 100%|██████████| 395/395 [00:02<00:00, 140.70it/s, loss=0.152, lr=9.92e-5, step=11454] 
Epoch 29: 100%|██████████| 395/395 [00:03<00:00, 113.43it/s, loss=0.107, lr=9.92e-5, step=11849]
Epoch 30: 100%|██████████| 395/395 [00:02<00:00, 141.46it/s, loss=0.171, lr=9.91e-5, step=12244] 
Epoch 31: 100%|██████████| 395/395 [00:03<00:00, 120.37it/s, loss=0.111, lr=9.91e-5, step=12639]
Epoch 32: 100%|██████████| 395/395 [00:03<00:00, 126.21it/s, loss=0.125, lr=9.9e-5, step=13034]  
Epoch 33: 100%|██████████| 395/395 [00:03<00:00, 117.51it/s, loss=0.0889, lr=9.89e-5, step=13429]
Epoch 34: 100%|██████████| 395/395 [00:02<00:00, 134.83it/s, loss=0.0889, lr=9.89e-5, step=13824]
Epoch 35: 100%|██████████| 395/395 [00:03<00:00, 111.37it/s, loss=0.0852, lr=9.88e-5, step=14219]
Epoch 36: 100%|██████████| 395/395 [00:03<00:00, 130.81it/s, loss=0.0984, lr=9.87e-5, step=14614]
Epoch 37: 100%|██████████| 395/395 [00:03<00:00, 112.39it/s, loss=0.134, lr=9.87e-5, step=15009]
Epoch 38: 100%|██████████| 395/395 [00:02<00:00, 139.18it/s, loss=0.0945, lr=9.86e-5, step=15404]
Epoch 39: 100%|██████████| 395/395 [00:03<00:00, 118.05it/s, loss=0.0659, lr=9.85e-5, step=15799]
Epoch 40: 100%|██████████| 395/395 [00:02<00:00, 132.80it/s, loss=0.102, lr=9.84e-5, step=16194] 
Epoch 41: 100%|██████████| 395/395 [00:03<00:00, 119.03it/s, loss=0.0579, lr=9.84e-5, step=16589]
Epoch 42: 100%|██████████| 395/395 [00:02<00:00, 136.45it/s, loss=0.0678, lr=9.83e-5, step=16984]
Epoch 43: 100%|██████████| 395/395 [00:03<00:00, 114.18it/s, loss=0.0546, lr=9.82e-5, step=17379]
Epoch 44: 100%|██████████| 395/395 [00:02<00:00, 138.01it/s, loss=0.0685, lr=9.81e-5, step=17774]
Epoch 45: 100%|██████████| 395/395 [00:03<00:00, 121.17it/s, loss=0.0711, lr=9.8e-5, step=18169]
Epoch 46: 100%|██████████| 395/395 [00:03<00:00, 130.29it/s, loss=0.0757, lr=9.79e-5, step=18564]
Epoch 47: 100%|██████████| 395/395 [00:03<00:00, 119.02it/s, loss=0.0953, lr=9.78e-5, step=18959]
Epoch 48: 100%|██████████| 395/395 [00:02<00:00, 138.35it/s, loss=0.0731, lr=9.78e-5, step=19354]
Epoch 49: 100%|██████████| 395/395 [00:03<00:00, 114.30it/s, loss=0.0745, lr=9.77e-5, step=19749]
Epoch 50: 100%|██████████| 395/395 [00:02<00:00, 140.62it/s, loss=0.0521, lr=9.76e-5, step=20144]
Epoch 51: 100%|██████████| 395/395 [00:03<00:00, 119.56it/s, loss=0.0758, lr=9.75e-5, step=20539]
Epoch 52: 100%|██████████| 395/395 [00:03<00:00, 127.06it/s, loss=0.1, lr=9.74e-5, step=20934]   
Epoch 53: 100%|██████████| 395/395 [00:03<00:00, 120.06it/s, loss=0.053, lr=9.73e-5, step=21329]
Epoch 54: 100%|██████████| 395/395 [00:02<00:00, 139.98it/s, loss=0.0779, lr=9.72e-5, step=21724]
Epoch 55: 100%|██████████| 395/395 [00:03<00:00, 113.69it/s, loss=0.0398, lr=9.71e-5, step=22119]
Epoch 56: 100%|██████████| 395/395 [00:02<00:00, 141.11it/s, loss=0.116, lr=9.7e-5, step=22514] ]
Epoch 57: 100%|██████████| 395/395 [00:03<00:00, 120.96it/s, loss=0.076, lr=9.68e-5, step=22909]
Epoch 58: 100%|██████████| 395/395 [00:02<00:00, 133.55it/s, loss=0.0484, lr=9.67e-5, step=23304]
Epoch 59: 100%|██████████| 395/395 [00:03<00:00, 119.69it/s, loss=0.103, lr=9.66e-5, step=23699]
Epoch 60: 100%|██████████| 395/395 [00:02<00:00, 137.95it/s, loss=0.0305, lr=9.65e-5, step=24094]
Epoch 61: 100%|██████████| 395/395 [00:03<00:00, 114.44it/s, loss=0.0634, lr=9.64e-5, step=24489]
Epoch 62: 100%|██████████| 395/395 [00:02<00:00, 136.17it/s, loss=0.0824, lr=9.63e-5, step=24884]
Epoch 63: 100%|██████████| 395/395 [00:03<00:00, 118.49it/s, loss=0.103, lr=9.61e-5, step=25279]
Epoch 64: 100%|██████████| 395/395 [00:02<00:00, 133.43it/s, loss=0.0559, lr=9.6e-5, step=25674] 
Epoch 65: 100%|██████████| 395/395 [00:03<00:00, 118.28it/s, loss=0.132, lr=9.59e-5, step=26069]
Epoch 66: 100%|██████████| 395/395 [00:02<00:00, 138.70it/s, loss=0.123, lr=9.58e-5, step=26464] 
Epoch 67: 100%|██████████| 395/395 [00:03<00:00, 112.11it/s, loss=0.0686, lr=9.56e-5, step=26859]
Epoch 68: 100%|██████████| 395/395 [00:02<00:00, 138.66it/s, loss=0.0818, lr=9.55e-5, step=27254]
Epoch 69: 100%|██████████| 395/395 [00:03<00:00, 117.36it/s, loss=0.0966, lr=9.54e-5, step=27649]
Epoch 70: 100%|██████████| 395/395 [00:03<00:00, 131.31it/s, loss=0.06, lr=9.53e-5, step=28044]  
Epoch 71: 100%|██████████| 395/395 [00:03<00:00, 118.72it/s, loss=0.0745, lr=9.51e-5, step=28439]
Epoch 72: 100%|██████████| 395/395 [00:02<00:00, 138.23it/s, loss=0.0667, lr=9.5e-5, step=28834] 
Epoch 73: 100%|██████████| 395/395 [00:03<00:00, 113.91it/s, loss=0.0393, lr=9.48e-5, step=29229]
Epoch 74: 100%|██████████| 395/395 [00:02<00:00, 134.92it/s, loss=0.0412, lr=9.47e-5, step=29624]
Epoch 75: 100%|██████████| 395/395 [00:03<00:00, 114.12it/s, loss=0.0604, lr=9.46e-5, step=3e+4]
Epoch 76: 100%|██████████| 395/395 [00:02<00:00, 135.55it/s, loss=0.076, lr=9.44e-5, step=30414] 
Epoch 77: 100%|██████████| 395/395 [00:03<00:00, 116.96it/s, loss=0.0431, lr=9.43e-5, step=30809]
Epoch 78: 100%|██████████| 395/395 [00:03<00:00, 129.02it/s, loss=0.0991, lr=9.41e-5, step=31204]
Epoch 79: 100%|██████████| 395/395 [00:03<00:00, 118.19it/s, loss=0.0422, lr=9.4e-5, step=31599]
Epoch 80: 100%|██████████| 395/395 [00:02<00:00, 135.09it/s, loss=0.0518, lr=9.38e-5, step=31994]
Epoch 81: 100%|██████████| 395/395 [00:03<00:00, 112.62it/s, loss=0.0636, lr=9.37e-5, step=32389]
Epoch 82: 100%|██████████| 395/395 [00:02<00:00, 135.65it/s, loss=0.0546, lr=9.35e-5, step=32784]
Epoch 83: 100%|██████████| 395/395 [00:03<00:00, 114.67it/s, loss=0.0628, lr=9.34e-5, step=33179]
Epoch 84: 100%|██████████| 395/395 [00:03<00:00, 128.92it/s, loss=0.0354, lr=9.32e-5, step=33574]
Epoch 85: 100%|██████████| 395/395 [00:03<00:00, 117.83it/s, loss=0.0343, lr=9.3e-5, step=33969]
Epoch 86: 100%|██████████| 395/395 [00:02<00:00, 136.88it/s, loss=0.0814, lr=9.29e-5, step=34364]
Epoch 87: 100%|██████████| 395/395 [00:03<00:00, 109.93it/s, loss=0.0507, lr=9.27e-5, step=34759]
Epoch 88: 100%|██████████| 395/395 [00:02<00:00, 133.31it/s, loss=0.0693, lr=9.26e-5, step=35154]
Epoch 89: 100%|██████████| 395/395 [00:03<00:00, 116.97it/s, loss=0.0922, lr=9.24e-5, step=35549]
Epoch 90: 100%|██████████| 395/395 [00:03<00:00, 131.09it/s, loss=0.0441, lr=9.22e-5, step=35944]
Epoch 91: 100%|██████████| 395/395 [00:03<00:00, 115.95it/s, loss=0.042, lr=9.21e-5, step=36339]
Epoch 92: 100%|██████████| 395/395 [00:02<00:00, 135.23it/s, loss=0.0546, lr=9.19e-5, step=36734]
Epoch 93: 100%|██████████| 395/395 [00:03<00:00, 109.64it/s, loss=0.0854, lr=9.17e-5, step=37129]
/tmp/ipykernel_57257/438467062.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
Early stopping at epoch 93
  model = torch.load("saved_models/MLP-model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/3734718323.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("saved_models/MLP-model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/3734718323.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("saved_models/MLP-model.pth")
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
/tmp/ipykernel_57257/238973531.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load("saved_models/MLP-model.pth").to(device)
0it [00:00, ?it/s]/tmp/ipykernel_57257/1307585270.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(act).unsqueeze(1).unsqueeze(-1)  # Convert to tensor and shape (bs, 1, 2, 1)
/tmp/ipykernel_57257/1307585270.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  class_cond = torch.tensor(obs)  # Convert to tensor (bs, class_emb_size)
0it [00:00, ?it/s]
tensor([[-2.8121,  1.9047],
        [-2.8121,  1.9047]], device='cuda:0')
tensor([[ 0.1197, -0.5467],
        [ 2.0531,  1.5894]], device='cuda:0')
tensor([[-2.8121,  1.9047],
        [-2.8121,  1.9047]], device='cuda:0')
ClassConditionedMLP(
  (mlp): Sequential(
    (0): Linear(in_features=5, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=2, bias=True)
  )
)
tensor([[ 0.1197, -0.5467],
        [ 2.0531,  1.5894]], device='cuda:0')
tensor([[-2.8121,  1.9047],
        [-2.8121,  1.9047]], device='cuda:0')
ClassConditionedMLP(
  (mlp): Sequential(
    (0): Linear(in_features=5, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=2, bias=True)
  )
)
tensor([[-2.8110,  1.8979],
        [-2.6461,  1.8752]])
